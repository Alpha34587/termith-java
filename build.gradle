plugins {
    id 'java'
    id 'idea'
    id 'org.hidetake.ssh' version '2.8.0'
}

group 'org.atilf'
version '0.11'

remotes {
    arges {
        role 'vm'
        host = 'arges.atilf.fr'
        user = 'smeoni'
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDirs 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'
    }
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile (group: 'fr.univ-nantes.termsuite', name: 'termsuite-core', version: '2.2'){
        exclude module:'commons-cli'
        exclude module:'commons-io'
        exclude module:'jackson-core'
        exclude module:'slf4j-api'
        exclude module: 'log4j-slf4j'
        exclude module:'commons-lang3'
        exclude module:'logback-classic'
        exclude module:'spring-beans'
        exclude module:'spring-core'
        exclude module:'activation'
    }

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.9'
    compile group: 'org.rosuda.REngine', name: 'Rserve', version: '1.8.1'
    compile group: 'com.h2database', name: 'h2', version: '1.4.193'
    integrationTestCompile 'org.assertj:assertj-core:3.8.0'
    integrationTestCompile 'junit:junit:4.12'
    integrationTestCompile (group: 'org.flowable', name: 'flowable-engine', version: '6.0.0'){
        exclude module:'slf4j-api'
        exclude module:'jackson-databind'
        exclude module:'activation'
    }
    integrationTestCompile sourceSets.main.output

    compile (group: 'org.flowable', name: 'flowable-engine', version: '6.0.0'){
        exclude module:'slf4j-api'
        exclude module:'jackson-databind'
        exclude module:'activation'
    }

    testCompile 'junit:junit:4.12'
    testCompile group: 'xmlunit', name: 'xmlunit', version: '1.6'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}
jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes("Main-Class": "org.atilf.cli.enrichment.TermithTreeTaggerCLI" )
    }
    baseName = project.name + '-all'
    classifier = 'SNAPSHOT'
    archiveName = "${baseName}-v${version}-${classifier}.${extension}"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task deployJar << {
    println(":checkTermithResources")
    tasks.jar.execute()
        ssh.run {
            session(remotes.arges) {
                execute 'rm -f /usr/local/istex/*.jar'
                put from: "/home/smeoni/IdeaProjects/termITH/build/libs/termITH-all-v${version}-SNAPSHOT.jar",
                        into: '/usr/local/istex'
                execute "ln -sf /usr/local/istex/termITH-all-v${version}-SNAPSHOT.jar /usr/local/istex/termith-jar"
            }
        }
}
task checkTermithResources {
    println(":checkTermithResources")
    def folder = new File("./src/main/resources/termith-resources")
    if( !folder.exists() ) {
        exec {
            executable "sh"
            args "-c", "git clone https://github.com/simonmeoni/termith-resources.git src/main/resources/termith-resources"
        }
    }
    else {
        exec {
            executable "sh"
            args "-c", "cd " + folder + "&& git pull"
        }
    }
}

task integrationTest(type: Test) {
    println(":checkTermithResources")
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
test {
    testLogging.showStandardStreams = true
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test